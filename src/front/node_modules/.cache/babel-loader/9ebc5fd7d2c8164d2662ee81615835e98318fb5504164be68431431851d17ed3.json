{"ast":null,"code":"import axios from \"axios\";\nimport Utils from \"../utils/Utils\";\nimport { alertActions, store } from \"../utils/Rdx\";\nconst API_URL = \"http://localhost:8081/api/v1\";\nconst AUTH_URL = \"http://localhost:8081/auth\";\nclass BackendService {\n  login(login, password) {\n    return axios.post(`${AUTH_URL}/login`, {\n      login,\n      password\n    });\n  }\n  logout() {\n    return axios.get(`${AUTH_URL}/logout`, {\n      headers: {\n        Authorization: Utils.getToken()\n      }\n    });\n  }\n\n  /* Countries */\n  retrieveAllCountries(page, limit) {\n    return axios.get(`${API_URL}/countries?page=${page}&limit=${limit}`);\n  }\n  retrieveCountry(id) {\n    return axios.get(`${API_URL}/countries/${id}`);\n  }\n  createCountry(country) {\n    return axios.post(`${API_URL}/countries`, country);\n  }\n  updateCountry(country) {\n    return axios.put(`${API_URL}/countries/${country.id}`, country);\n  }\n  deleteCountries(countries) {\n    return axios.post(`${API_URL}/deletecountries`, countries);\n  }\n\n  /* Artists*/\n  retrieveAllArtists(page, limit) {\n    return axios.get(`${API_URL}/artists?page=${page}&limit=${limit}`);\n  }\n  retrieveArtist(id) {\n    console.log(axios.get(`${API_URL}/artists/${id}`));\n    return axios.get(`${API_URL}/artists/${id}`);\n  }\n  createArtist(artist) {\n    return axios.post(`${API_URL}/artists`, artist);\n  }\n  updateArtist(artist) {\n    return axios.put(`${API_URL}/artists/${artist.id}`, artist);\n  }\n  deleteArtists(artists) {\n    return axios.post(`${API_URL}/deleteartists`, artists);\n  }\n\n  /* Paintings*/\n  retrieveAllPaintings(page, limit) {\n    console.log(\"error what the\");\n    return axios.get(`${API_URL}/paintings?page=${page}&limit=${limit}`);\n  }\n  retrievePainting(id) {\n    console.log(axios.get(`${API_URL}/paintings/${id}`));\n    return axios.get(`${API_URL}/paintings/${id}`);\n  }\n  createPainting(painting) {\n    return axios.post(`${API_URL}/paintings`, painting);\n  }\n  updatePainting(painting) {\n    return axios.put(`${API_URL}/paintings/${painting.id}`, painting);\n  }\n  deletePaintings(paintings) {\n    return axios.post(`${API_URL}/deletepaintings`, paintings);\n  }\n\n  /* Museums */\n  retrieveAllMuseums(page, limit) {\n    return axios.get(`${API_URL}/museums?page=${page}&limit=${limit}`);\n  }\n  retrieveMuseum(id) {\n    return axios.get(`${API_URL}/museums/${id}`);\n  }\n  createMuseum(museum) {\n    return axios.post(`${API_URL}/museums`, museum);\n  }\n  updateMuseum(museum) {\n    return axios.put(`${API_URL}/museums/${museum.id}`, museum);\n  }\n  deleteMuseums(museums) {\n    return axios.post(`${API_URL}/deletemuseums`, museums);\n  }\n}\nfunction showError(msg) {\n  store.dispatch(alertActions.error(msg));\n}\naxios.interceptors.request.use(config => {\n  store.dispatch(alertActions.clear());\n  let token = Utils.getToken();\n  if (token) config.headers.Authorization = token;\n  return config;\n}, error => {\n  showError(error.message);\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(undefined, error => {\n  if (error.response && error.response.status && [401, 403].indexOf(error.response.status) !== -1) {\n    showError(\"Ошибка авторизации\");\n    console.error(error);\n  } else if (error.response && error.response.data && error.response.data.message) showError(error.response.data.message);else showError(error.message);\n  return Promise.reject(error);\n});\nexport default new BackendService();","map":{"version":3,"names":["axios","Utils","alertActions","store","API_URL","AUTH_URL","BackendService","login","password","post","logout","get","headers","Authorization","getToken","retrieveAllCountries","page","limit","retrieveCountry","id","createCountry","country","updateCountry","put","deleteCountries","countries","retrieveAllArtists","retrieveArtist","console","log","createArtist","artist","updateArtist","deleteArtists","artists","retrieveAllPaintings","retrievePainting","createPainting","painting","updatePainting","deletePaintings","paintings","retrieveAllMuseums","retrieveMuseum","createMuseum","museum","updateMuseum","deleteMuseums","museums","showError","msg","dispatch","error","interceptors","request","use","config","clear","token","message","Promise","reject","response","undefined","status","indexOf","data"],"sources":["/home/dungodan/AndroidStudioProjects/PART_8/backend/src/front/src/services/BackendService.jsx"],"sourcesContent":["import axios from \"axios\";\nimport Utils from \"../utils/Utils\";\nimport { alertActions, store } from \"../utils/Rdx\";\n\nconst API_URL = \"http://localhost:8081/api/v1\";\nconst AUTH_URL = \"http://localhost:8081/auth\";\n\nclass BackendService {\n  login(login, password) {\n    return axios.post(`${AUTH_URL}/login`, { login, password });\n  }\n\n  logout() {\n    return axios.get(`${AUTH_URL}/logout`, {\n      headers: { Authorization: Utils.getToken() },\n    });\n  }\n\n  /* Countries */\n  retrieveAllCountries(page, limit) {\n    return axios.get(`${API_URL}/countries?page=${page}&limit=${limit}`);\n  }\n\n  retrieveCountry(id) {\n    return axios.get(`${API_URL}/countries/${id}`);\n  }\n\n  createCountry(country) {\n    return axios.post(`${API_URL}/countries`, country);\n  }\n\n  updateCountry(country) {\n    return axios.put(`${API_URL}/countries/${country.id}`, country);\n  }\n\n  deleteCountries(countries) {\n    return axios.post(`${API_URL}/deletecountries`, countries);\n  }\n\n  /* Artists*/\n  retrieveAllArtists(page, limit) {\n    return axios.get(`${API_URL}/artists?page=${page}&limit=${limit}`);\n  }\n\n  retrieveArtist(id) {\n    console.log(axios.get(`${API_URL}/artists/${id}`));\n    return axios.get(`${API_URL}/artists/${id}`);\n  }\n\n  createArtist(artist) {\n    return axios.post(`${API_URL}/artists`, artist);\n  }\n\n  updateArtist(artist) {\n    return axios.put(`${API_URL}/artists/${artist.id}`, artist);\n  }\n\n  deleteArtists(artists) {\n    return axios.post(`${API_URL}/deleteartists`, artists);\n  }\n\n  /* Paintings*/\n  retrieveAllPaintings(page, limit) {\n    console.log(\"error what the\");\n    return axios.get(`${API_URL}/paintings?page=${page}&limit=${limit}`);\n  }\n\n  retrievePainting(id) {\n    console.log(axios.get(`${API_URL}/paintings/${id}`));\n    return axios.get(`${API_URL}/paintings/${id}`);\n  }\n\n  createPainting(painting) {\n    return axios.post(`${API_URL}/paintings`, painting);\n  }\n  s;\n  updatePainting(painting) {\n    return axios.put(`${API_URL}/paintings/${painting.id}`, painting);\n  }\n\n  deletePaintings(paintings) {\n    return axios.post(`${API_URL}/deletepaintings`, paintings);\n  }\n\n  /* Museums */\n  retrieveAllMuseums(page, limit) {\n    return axios.get(`${API_URL}/museums?page=${page}&limit=${limit}`);\n  }\n\n  retrieveMuseum(id) {\n    return axios.get(`${API_URL}/museums/${id}`);\n  }\n\n  createMuseum(museum) {\n    return axios.post(`${API_URL}/museums`, museum);\n  }\n\n  updateMuseum(museum) {\n    return axios.put(`${API_URL}/museums/${museum.id}`, museum);\n  }\n\n  deleteMuseums(museums) {\n    return axios.post(`${API_URL}/deletemuseums`, museums);\n  }\n}\n\nfunction showError(msg) {\n  store.dispatch(alertActions.error(msg));\n}\n\naxios.interceptors.request.use(\n  (config) => {\n    store.dispatch(alertActions.clear());\n    let token = Utils.getToken();\n    if (token) config.headers.Authorization = token;\n    return config;\n  },\n  (error) => {\n    showError(error.message);\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, (error) => {\n  if (\n    error.response &&\n    error.response.status &&\n    [401, 403].indexOf(error.response.status) !== -1\n  ) {\n    showError(\"Ошибка авторизации\");\n    console.error(error);\n  } else if (\n    error.response &&\n    error.response.data &&\n    error.response.data.message\n  )\n    showError(error.response.data.message);\n  else showError(error.message);\n  return Promise.reject(error);\n});\n\nexport default new BackendService();\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,gBAAgB;AAClC,SAASC,YAAY,EAAEC,KAAK,QAAQ,cAAc;AAElD,MAAMC,OAAO,GAAG,8BAA8B;AAC9C,MAAMC,QAAQ,GAAG,4BAA4B;AAE7C,MAAMC,cAAc,CAAC;EACnBC,KAAKA,CAACA,KAAK,EAAEC,QAAQ,EAAE;IACrB,OAAOR,KAAK,CAACS,IAAI,CAAE,GAAEJ,QAAS,QAAO,EAAE;MAAEE,KAAK;MAAEC;IAAS,CAAC,CAAC;EAC7D;EAEAE,MAAMA,CAAA,EAAG;IACP,OAAOV,KAAK,CAACW,GAAG,CAAE,GAAEN,QAAS,SAAQ,EAAE;MACrCO,OAAO,EAAE;QAAEC,aAAa,EAAEZ,KAAK,CAACa,QAAQ,CAAC;MAAE;IAC7C,CAAC,CAAC;EACJ;;EAEA;EACAC,oBAAoBA,CAACC,IAAI,EAAEC,KAAK,EAAE;IAChC,OAAOjB,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,mBAAkBY,IAAK,UAASC,KAAM,EAAC,CAAC;EACtE;EAEAC,eAAeA,CAACC,EAAE,EAAE;IAClB,OAAOnB,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,cAAae,EAAG,EAAC,CAAC;EAChD;EAEAC,aAAaA,CAACC,OAAO,EAAE;IACrB,OAAOrB,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,YAAW,EAAEiB,OAAO,CAAC;EACpD;EAEAC,aAAaA,CAACD,OAAO,EAAE;IACrB,OAAOrB,KAAK,CAACuB,GAAG,CAAE,GAAEnB,OAAQ,cAAaiB,OAAO,CAACF,EAAG,EAAC,EAAEE,OAAO,CAAC;EACjE;EAEAG,eAAeA,CAACC,SAAS,EAAE;IACzB,OAAOzB,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,kBAAiB,EAAEqB,SAAS,CAAC;EAC5D;;EAEA;EACAC,kBAAkBA,CAACV,IAAI,EAAEC,KAAK,EAAE;IAC9B,OAAOjB,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,iBAAgBY,IAAK,UAASC,KAAM,EAAC,CAAC;EACpE;EAEAU,cAAcA,CAACR,EAAE,EAAE;IACjBS,OAAO,CAACC,GAAG,CAAC7B,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,YAAWe,EAAG,EAAC,CAAC,CAAC;IAClD,OAAOnB,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,YAAWe,EAAG,EAAC,CAAC;EAC9C;EAEAW,YAAYA,CAACC,MAAM,EAAE;IACnB,OAAO/B,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,UAAS,EAAE2B,MAAM,CAAC;EACjD;EAEAC,YAAYA,CAACD,MAAM,EAAE;IACnB,OAAO/B,KAAK,CAACuB,GAAG,CAAE,GAAEnB,OAAQ,YAAW2B,MAAM,CAACZ,EAAG,EAAC,EAAEY,MAAM,CAAC;EAC7D;EAEAE,aAAaA,CAACC,OAAO,EAAE;IACrB,OAAOlC,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,gBAAe,EAAE8B,OAAO,CAAC;EACxD;;EAEA;EACAC,oBAAoBA,CAACnB,IAAI,EAAEC,KAAK,EAAE;IAChCW,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7B,OAAO7B,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,mBAAkBY,IAAK,UAASC,KAAM,EAAC,CAAC;EACtE;EAEAmB,gBAAgBA,CAACjB,EAAE,EAAE;IACnBS,OAAO,CAACC,GAAG,CAAC7B,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,cAAae,EAAG,EAAC,CAAC,CAAC;IACpD,OAAOnB,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,cAAae,EAAG,EAAC,CAAC;EAChD;EAEAkB,cAAcA,CAACC,QAAQ,EAAE;IACvB,OAAOtC,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,YAAW,EAAEkC,QAAQ,CAAC;EACrD;EAEAC,cAAcA,CAACD,QAAQ,EAAE;IACvB,OAAOtC,KAAK,CAACuB,GAAG,CAAE,GAAEnB,OAAQ,cAAakC,QAAQ,CAACnB,EAAG,EAAC,EAAEmB,QAAQ,CAAC;EACnE;EAEAE,eAAeA,CAACC,SAAS,EAAE;IACzB,OAAOzC,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,kBAAiB,EAAEqC,SAAS,CAAC;EAC5D;;EAEA;EACAC,kBAAkBA,CAAC1B,IAAI,EAAEC,KAAK,EAAE;IAC9B,OAAOjB,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,iBAAgBY,IAAK,UAASC,KAAM,EAAC,CAAC;EACpE;EAEA0B,cAAcA,CAACxB,EAAE,EAAE;IACjB,OAAOnB,KAAK,CAACW,GAAG,CAAE,GAAEP,OAAQ,YAAWe,EAAG,EAAC,CAAC;EAC9C;EAEAyB,YAAYA,CAACC,MAAM,EAAE;IACnB,OAAO7C,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,UAAS,EAAEyC,MAAM,CAAC;EACjD;EAEAC,YAAYA,CAACD,MAAM,EAAE;IACnB,OAAO7C,KAAK,CAACuB,GAAG,CAAE,GAAEnB,OAAQ,YAAWyC,MAAM,CAAC1B,EAAG,EAAC,EAAE0B,MAAM,CAAC;EAC7D;EAEAE,aAAaA,CAACC,OAAO,EAAE;IACrB,OAAOhD,KAAK,CAACS,IAAI,CAAE,GAAEL,OAAQ,gBAAe,EAAE4C,OAAO,CAAC;EACxD;AACF;AAEA,SAASC,SAASA,CAACC,GAAG,EAAE;EACtB/C,KAAK,CAACgD,QAAQ,CAACjD,YAAY,CAACkD,KAAK,CAACF,GAAG,CAAC,CAAC;AACzC;AAEAlD,KAAK,CAACqD,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACVrD,KAAK,CAACgD,QAAQ,CAACjD,YAAY,CAACuD,KAAK,CAAC,CAAC,CAAC;EACpC,IAAIC,KAAK,GAAGzD,KAAK,CAACa,QAAQ,CAAC,CAAC;EAC5B,IAAI4C,KAAK,EAAEF,MAAM,CAAC5C,OAAO,CAACC,aAAa,GAAG6C,KAAK;EAC/C,OAAOF,MAAM;AACf,CAAC,EACAJ,KAAK,IAAK;EACTH,SAAS,CAACG,KAAK,CAACO,OAAO,CAAC;EACxB,OAAOC,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC;AAEDpD,KAAK,CAACqD,YAAY,CAACS,QAAQ,CAACP,GAAG,CAACQ,SAAS,EAAGX,KAAK,IAAK;EACpD,IACEA,KAAK,CAACU,QAAQ,IACdV,KAAK,CAACU,QAAQ,CAACE,MAAM,IACrB,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,OAAO,CAACb,KAAK,CAACU,QAAQ,CAACE,MAAM,CAAC,KAAK,CAAC,CAAC,EAChD;IACAf,SAAS,CAAC,oBAAoB,CAAC;IAC/BrB,OAAO,CAACwB,KAAK,CAACA,KAAK,CAAC;EACtB,CAAC,MAAM,IACLA,KAAK,CAACU,QAAQ,IACdV,KAAK,CAACU,QAAQ,CAACI,IAAI,IACnBd,KAAK,CAACU,QAAQ,CAACI,IAAI,CAACP,OAAO,EAE3BV,SAAS,CAACG,KAAK,CAACU,QAAQ,CAACI,IAAI,CAACP,OAAO,CAAC,CAAC,KACpCV,SAAS,CAACG,KAAK,CAACO,OAAO,CAAC;EAC7B,OAAOC,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CAAC,CAAC;AAEF,eAAe,IAAI9C,cAAc,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}